# Base Types
_int = "int"
_float = "float"
_string = "string"
_bool = "bool"
_undef = "undef"
_symbol = "object" # TODO: This is very temporary
_object = "object"
_tensor = "tensor"

# Compound Types
_array = "array"
_sym_expr = "sym_expr"

# Entities which will return a type
_funtion = "funtion"

# Current
_int = "int"
_float = "float"
_array = "array"
_object = "object"
_tensor = "tensor"
_undef = "undef"
_funtion = "funtion"

plusOperatorTypes = {
    _int: {
        _int: _int,
        _float: _float,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _sym_expr,
        _sym_expr: _sym_expr,
        _funtion: _sym_expr,
    },
    _float: {
        _int: _float,
        _float: _float,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _sym_expr,
        _sym_expr: _sym_expr,
        _funtion: _sym_expr,
    },
    _string: {
        _int: _undef,
        _float: _undef,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _undef,
        _sym_expr: _undef,
        _funtion: _undef,
    },
    _bool: {
        _int: _undef,
        _float: _undef,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _undef,
        _sym_expr: _undef,
        _funtion: _undef,
    },
    _array: {
        _int: _undef,
        _float: _undef,
        _string: _undef,
        _bool: _undef,
        _array: _array,
        _tensor: _undef,
        _symbol: _undef,
        _sym_expr: _undef,
        _funtion: _undef,
    },
    _tensor: {
        _int: _undef,
        _float: _undef,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _tensor,
        _symbol: _undef,
        _sym_expr: _undef,
        _funtion: _undef,
    },
    _symbol: {
        _int: _sym_expr,
        _float: _sym_expr,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _sym_expr,
        _sym_expr: _sym_expr,
        _funtion: _sym_expr,
    },
    _sym_expr: {
        _int: _sym_expr,
        _float: _sym_expr,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _sym_expr,
        _sym_expr: _sym_expr,
        _funtion: _sym_expr,
    },
    _funtion: {
        _int: _sym_expr,
        _float: _sym_expr,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _sym_expr,
        _sym_expr: _sym_expr,
        _funtion: _sym_expr,
    },
}

minusOperatorTypes = {
    _int: {
        _int: _int,
        _float: _float,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _sym_expr,
        _sym_expr: _sym_expr,
        _funtion: _sym_expr,
    },
    _float: {
        _int: _float,
        _float: _float,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _sym_expr,
        _sym_expr: _sym_expr,
        _funtion: _sym_expr,
    },
    _string: {
        _int: _undef,
        _float: _undef,
        _string: _string,  # concatinate them
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _undef,
        _sym_expr: _undef,
        _funtion: _undef,
    },
    _bool: {
        _int: _undef,
        _float: _undef,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _undef,
        _sym_expr: _undef,
        _funtion: _undef,
    },
    _array: {
        _int: _undef,
        _float: _undef,
        _string: _undef,
        _bool: _undef,
        _array: _array,
        _tensor: _undef,
        _symbol: _undef,
        _sym_expr: _undef,
        _funtion: _undef,
    },
    _tensor: {
        _int: _undef,
        _float: _undef,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _tensor,
        _symbol: _undef,
        _sym_expr: _undef,
        _funtion: _undef,
    },
    _symbol: {
        _int: _sym_expr,
        _float: _sym_expr,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _sym_expr,
        _sym_expr: _sym_expr,
        _funtion: _sym_expr,
    },
    _sym_expr: {
        _int: _sym_expr,
        _float: _sym_expr,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _sym_expr,
        _sym_expr: _sym_expr,
        _funtion: _sym_expr,
    },
    _funtion: {
        _int: _sym_expr,
        _float: _sym_expr,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _sym_expr,
        _sym_expr: _sym_expr,
        _funtion: _sym_expr,
    },
}

mulOperatorTypes = {
    _int: {
        _int: _int,
        _float: _float,
        _string: _undef,
        _bool: _undef,
        _array: _array,
        _tensor: _tensor,
        _symbol: _sym_expr,
        _sym_expr: _sym_expr,
        _funtion: _sym_expr,
    },
    _float: {
        _int: _float,
        _float: _float,
        _string: _undef,
        _bool: _undef,
        _array: _array,
        _tensor: _tensor,
        _symbol: _sym_expr,
        _sym_expr: _sym_expr,
        _funtion: _sym_expr,
    },
    _string: {
        _int: _undef,
        _float: _undef,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _undef,
        _sym_expr: _undef,
        _funtion: _undef,
    },
    _bool: {
        _int: _undef,
        _float: _undef,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _undef,
        _sym_expr: _undef,
        _funtion: _undef,
    },
    _array: {
        _int: _array,
        _float: _array,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _array,
        _sym_expr: _array,
        _funtion: _array,
    },
    _tensor: {
        _int: _tensor,
        _float: _tensor,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _tensor,
        _symbol: _tensor,
        _sym_expr: _tensor,
        _funtion: _tensor,
    },
    _symbol: {
        _int: _sym_expr,
        _float: _sym_expr,
        _string: _undef,
        _bool: _undef,
        _array: _array,
        _tensor: _tensor,
        _symbol: _sym_expr,
        _sym_expr: _sym_expr,
        _funtion: _sym_expr,
    },
    _sym_expr: {
        _int: _sym_expr,
        _float: _sym_expr,
        _string: _undef,
        _bool: _undef,
        _array: _array,
        _tensor: _tensor,
        _symbol: _sym_expr,
        _sym_expr: _sym_expr,
        _funtion: _sym_expr,
    },
    _funtion: {
        _int: _sym_expr,
        _float: _sym_expr,
        _string: _undef,
        _bool: _undef,
        _array: _array,
        _tensor: _tensor,
        _symbol: _sym_expr,
        _sym_expr: _sym_expr,
        _funtion: _sym_expr,
    },
}

powOperatorTypes = {
    _int: {
        _int: _int,
        _float: _float,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _sym_expr,
        _sym_expr: _sym_expr,
        _funtion: _sym_expr,
    },
    _float: {
        _int: _float,
        _float: _float,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _sym_expr,
        _sym_expr: _sym_expr,
        _funtion: _sym_expr,
    },
    _string: {
        _int: _undef,
        _float: _undef,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _undef,
        _sym_expr: _undef,
        _funtion: _undef,
    },
    _bool: {
        _int: _undef,
        _float: _undef,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _undef,
        _sym_expr: _undef,
        _funtion: _undef,
    },
    _array: {
        _int: _undef,
        _float: _undef,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _undef,
        _sym_expr: _undef,
        _funtion: _undef,
    },
    _tensor: {
        _int: _undef,
        _float: _undef,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _undef,
        _sym_expr: _undef,
        _funtion: _undef,
    },
    _symbol: {
        _int: _sym_expr,
        _float: _sym_expr,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _sym_expr,
        _sym_expr: _sym_expr,
        _funtion: _sym_expr,
    },
    _sym_expr: {
        _int: _sym_expr,
        _float: _sym_expr,
        _string: _undef,
        _bool: _undef,
        _array: _array,
        _tensor: _tensor,
        _symbol: _sym_expr,
        _sym_expr: _sym_expr,
        _funtion: _sym_expr,
    },
    _funtion: {
        _int: _sym_expr,
        _float: _sym_expr,
        _string: _undef,
        _bool: _undef,
        _array: _array,
        _tensor: _tensor,
        _symbol: _sym_expr,
        _sym_expr: _sym_expr,
        _funtion: _sym_expr,
    },
}

divOperatorTypes = {
    _int: {
        _int: _float,
        _float: _float,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _sym_expr,
        _sym_expr: _sym_expr,
        _funtion: _sym_expr,
    },
    _float: {
        _int: _float,
        _float: _float,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _sym_expr,
        _sym_expr: _sym_expr,
        _funtion: _sym_expr,
    },
    _string: {
        _int: _undef,
        _float: _undef,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _undef,
        _sym_expr: _undef,
        _funtion: _undef,
    },
    _bool: {
        _int: _undef,
        _float: _undef,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _undef,
        _sym_expr: _undef,
        _funtion: _undef,
    },
    _array: {
        _int: _array,
        _float: _array,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _array,
        _sym_expr: _array,
        _funtion: _array,
    },
    _tensor: {
        _int: _tensor,
        _float: _tensor,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,  # if users enter T_{x:0}
        _symbol: _tensor,
        _sym_expr: _tensor,
        _funtion: _tensor,
    },
    _symbol: {
        _int: _sym_expr,
        _float: _sym_expr,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _sym_expr,
        _symbol: _sym_expr,
        _sym_expr: _sym_expr,
        _funtion: _sym_expr,
    },
    _sym_expr: {
        _int: _sym_expr,
        _float: _sym_expr,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _sym_expr,
        _sym_expr: _sym_expr,
        _funtion: _sym_expr,
    },
    _funtion: {
        _int: _sym_expr,
        _float: _sym_expr,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _sym_expr,
        _sym_expr: _sym_expr,
        _funtion: _sym_expr,
    },
}

simplifyOperatorTypes = {
    _int: _int,
    _float: _float,
    _string: _undef,
    _bool: _undef,
    _array: _array,
    _tensor: _tensor,
    _symbol: _symbol,
    _sym_expr: _sym_expr,
    _funtion: _sym_expr,
}


# Operations Context adding - Bellow are tables which give context to which operation we are dealing with.
# Assigning operaiont types
_tensor_expr_assignment = "tensor_expr_assignment" # When the equals sign represents 'T_{a}_{b} = D_{a}*A_{b} - D_{b}*A_{a}'
_tensor_component_assigning = "tensor_component_assigning" # When the equals sign represents ' T_{a}_{b} = [[1, 0], [0, r**2]] ' i.e. the an arbitrary tensor is being initiated and the components are being assigned
_variable_assignment = "variable_assignment" # when we have something like ' x = efewfgwef + 1' then we are initializing a variable 'x' which holds the value of 'efewfgwef + 1'

# TODO: This still needs implementing
_function_definition = 'function_definition' # When we have something like 'f(x) = x**2 + y' then what I am after is a callable function to be defined where I can pass paramater x and the result is to saquare it and add y to that param.

assigningTypes = {
    _int: {
        _int: _undef,
        _float: _undef,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _undef,
        _sym_expr: _undef,
        _funtion: _undef,
    },
    _float: {
        _int: _undef,
        _float: _undef,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _undef,
        _sym_expr: _undef,
        _funtion: _undef,
    },
    _string: {
        _int: _undef,
        _float: _undef,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _undef,
        _sym_expr: _undef,
        _funtion: _undef,
    },
    _bool: {
        _int: _undef,
        _float: _undef,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _undef,
        _sym_expr: _undef,
        _funtion: _undef,
    },
    _array: {
        _int: _undef,
        _float: _undef,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _undef,
        _sym_expr: _undef,
        _funtion: _undef,
    },
    _tensor: {
        _int: _undef,
        _float: _undef,
        _string: _undef,
        _bool: _undef,
        _array: _tensor_component_assigning,
        _tensor: _tensor_expr_assignment,
        _symbol: _undef,
        _sym_expr: _undef,
        _funtion: _undef,
    },
    _symbol: {
        _int: _variable_assignment,
        _float: _variable_assignment,
        _string: _variable_assignment,
        _bool: _variable_assignment,
        _array: _variable_assignment,
        _tensor: _variable_assignment,
        _symbol: _variable_assignment,
        _sym_expr: _variable_assignment,
        _funtion: _variable_assignment,
    },
    _sym_expr: {
        _int: _undef,
        _float: _undef,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _undef,
        _sym_expr: _undef,
        _funtion: _undef,
    },
    _funtion: {
        _int: _function_definition,
        _float: _function_definition,
        _string: _undef,
        _bool: _undef,
        _array: _undef,
        _tensor: _undef,
        _symbol: _function_definition,
        _sym_expr: _function_definition,
        _funtion: _undef,
    },
}


