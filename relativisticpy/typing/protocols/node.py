from typing import Protocol
from relativisticpy.typing.protocols.implementer import Implementer


# Protocol typing class allows for very flexible and powerful type hints, enabling you to specify exactly what
# behavior is required from an object, without specifying the exact class of the object. This is especially useful in
# cases where you want to allow multiple different classes to be used, as long as they provide certain methods.

class Node(Protocol):
    """ All external classes which are implementing the Nodes generated by the interpreter module MUST match this
    protocol. Implementing all it's methods."""

    @property
    def is_leaf(self) -> bool:
        """ Boolean representing if this is a leaf node. """
        ...

    @property
    def is_root(self) -> bool:
        """ Boolean representing if this is the root node. """
        ...

    def analyze_node(self, analyzer: Implementer) -> None:
        """ Implements TensorNode when components already in state. """
        ...

    def execute_node(self, executor: Implementer) -> None:
        """ Implements TensorNode when components already in state. """
        ...
